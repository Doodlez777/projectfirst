
import time
import telebot
from telebot import types # –∫–Ω–æ–ø–∫–∏
from string import Template

bot = telebot.TeleBot('1277655533:AAGQTmPqq6l83lMAIAGqUzG_vEKeVshZCjo')

user_dict = {}

class User:
    def __init__(self, city):
        self.city = city

        keys = ['fullname', 'phone', 'timeuser',
                'menu', 'taste']


        for key in keys:
            self.key = None

# –µ—Å–ª–∏ /help, /start
@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    itembtn1 = types.KeyboardButton('/about')
    itembtn2 = types.KeyboardButton('/smoke')
    itembtn3 = types.KeyboardButton('/discounts')
    markup.add(itembtn1, itembtn2, itembtn3)

    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù "
    + message.from_user.first_name
    + ",\n –Ø ü§ñ –ö–∞–ª—å—è–Ω–Ω—ã–π –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä", reply_markup=markup)

# /about
@bot.message_handler(commands=['about'])
def send_about(message):
	bot.send_message(message.chat.id, 'üïµÔ∏è‚Äç‚ôÇÔ∏è–ö–∞–ª—å—è–Ω–Ω—ã–π  –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –∂–¥–µ—Ç –í–∞—Å –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –†–¶ ¬´Taler¬ª –∏ –≤ –∫–∞–ª—å—è–Ω-–±–∞—Ä–µ ¬´–ú–æ–¥–Ω–∞—è –ë–æ—á–∫–∞¬ª \nüßæ–ü—Ä–æ–∫–∞—á–∏–≤–∞–µ–º –∫–∞–ª—å—è–Ω—ã, —Å–Ω–∏–º–∞–µ–º —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∫–∞–ª—å—è–Ω—ã –î—ã–º–Ω–∞—è –ü—É—à–∫–∞ \nüëá–ü–†–û–î–ê–ñ–ê —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –î—ã–º–Ω—ã—Ö üõç  \n http://h-inspector.com/')


@bot.message_handler(commands=['discounts'])
def send_discounts(message):
    bot.send_message(message.chat.id, 'üí®–î—ã–º–Ω—ã–π –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –∫–∞–ª—å—è–Ω –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π 80 –≥—Ä–Ω \nüò§–°—Ä–µ–¥–∞ 1+1 - 2 –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∫–∞–ª—å—è–Ω–∞ –ø–æ —Ü–µ–Ω–µ 1–≥–æ \nüë®‚Äçüë©‚Äçüëß‚Äçüëß–î–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –º–Ω–æ–≥–æ –¥—ã–º–∏—Ç—å - –ø—Ä–∏–∑–∞–∫–∞–∑–µ 2—Ö –∫–∞–ª—å—è–Ω–æ–≤, 3–π –≤ –ø–æ–¥–∞—Ä–æ–∫!')




# /smoke
@bot.message_handler(commands=["smoke"])
def user_reg(message):
       markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
       itembtn1 = types.KeyboardButton('–¢–∞–ª–ª–µ—Ä')

       markup.add(itembtn1)

       msg = bot.send_message(message.chat.id, '–ì–¥–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫—É—Ä–∏—Ç—å?', reply_markup=markup)
       bot.register_next_step_handler(msg, process_city_step)

def process_city_step(message):
    try:
        chat_id = message.chat.id
        user_dict[chat_id] = User(message.text)

        # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardRemove(selective=False)

        msg = bot.send_message(chat_id, '–í–∞—à–µ –∏–º—è', reply_markup=markup)
        bot.register_next_step_handler(msg, process_fullname_step)

    except Exception as e:
        bot.reply_to(message, 'ooops!!')

def process_fullname_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.fullname = message.text

        msg = bot.send_message(chat_id, '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        bot.register_next_step_handler(msg, process_phone_step)

    except Exception as e:
        bot.reply_to(message, 'ooops!!')

def process_phone_step(message):
    try:


        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.phone = message.text

        msg = bot.send_message(chat_id, '–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ?')
        bot.register_next_step_handler(msg, process_timeuser_step)

    except Exception as e:
        msg = bot.reply_to(message, '–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        bot.register_next_step_handler(msg, process_phone_step)

def process_timeuser_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.timeuser = message.text

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        itembtn1 = types.KeyboardButton('–ö–∞–ª—å—è–Ω –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π 145 –≥—Ä–Ω')
        itembtn2 = types.KeyboardButton('–ö–∞–ª—å—è–Ω –ø—Ä–µ–º–∏—É–º light  170 –≥—Ä–Ω')
        itembtn3 = types.KeyboardButton('–ö–∞–ª—å—è–Ω –ø—Ä–µ–º–∏—É–º strong 200 –≥—Ä–Ω')

        for item in [itembtn1, itembtn2, itembtn3]:
            markup.add(item)



        msg = bot.send_message(chat_id, '–ú–µ–Ω—é: ', reply_markup=markup)
        bot.register_next_step_handler(msg, process_menu_step)

    except Exception as e:
        bot.reply_to(message, 'ooops!!')

def process_menu_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.menu = message.text

        msg = bot.send_message(chat_id, '–ö–∞–∫–æ–π –≤–∫—É—Å?')
        bot.register_next_step_handler(msg, process_taste_step)

    except Exception as e:
        bot.reply_to(message, 'ooops!!')

def process_taste_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.taste = message.text

        bot.send_message(chat_id, getRegData(user, '–í–∞—à –∑–∞–∫–∞–∑', message.from_user.first_name), parse_mode="Markdown")

        time.sleep(1)

        bot.send_message(chat_id, '–°–ø–∞—Å–∏–±–æ, –º—ã –≤–∞—Å –∂–¥–µ–º üëç')

        bot.send_message('@chat_hookahh', getRegData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username), parse_mode="Markdown")





    except Exception as e:
        bot.reply_to(message, 'ooops!!')









# —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–∏–¥ –∑–∞—è–≤–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ Template
# –≤ send_message –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å parse_mode="Markdown"
def getRegData(user, title, name):
    t = Template('$title *$name* \n –ú–µ—Å—Ç–æ: *$userCity* \n –ò–º—è: *$fullname* \n –¢–µ–ª–µ—Ñ–æ–Ω: *$phone* \n –í—Ä–µ–º—è: *$timeuser* \n –ú–µ–Ω—é: *$menu* \n –í–∫—É—Å: *$taste* ')

    return t.substitute({
        'title': title,
        'name': name,
        'userCity': user.city,
        'fullname': user.fullname,
        'phone': user.phone,
        'timeuser': user.timeuser,
        'menu': user.menu,
        'taste': user.taste,








    })

# –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
@bot.message_handler(content_types=["text"])
def send_help(message):
    bot.send_message(message.chat.id, '–û –Ω–∞—Å - /about\n–ü–æ–∫—É—Ä–∏—Ç—å - /smoke\n–ü–æ–º–æ—â—å - /help')





if __name__ == '__main__':
    bot.polling(none_stop=True)
